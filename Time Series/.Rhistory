plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
# simulate returns and then stock price
# white noise
t <- 100
t_i <- seq(1, t, 0.1)
WN <- rnorm(length(t_i), 0, 1)
# path
WN_ns <- sqrt(t_i) * WN * sin(t_i)
# total return
sum(WN_ns / t)
# initial stock price plus returns
stock_ret <- cumsum(WN_ns)
stock <- t + stock_ret
if (sum(stock < 0) > 0) {
print("Bankrupt!")
} else {
plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
# simulate returns and then stock price
# white noise
t <- 100
t_i <- seq(1, t, 0.1)
WN <- rnorm(length(t_i), 0, 1)
# path
WN_ns <- sqrt(t_i) * WN * sin(t_i)
# total return
sum(WN_ns / t)
# initial stock price plus returns
stock_ret <- cumsum(WN_ns)
stock <- t + stock_ret
if (sum(stock < 0) > 0) {
print("Bankrupt!")
} else {
plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
# simulate returns and then stock price
# white noise
t <- 100
t_i <- seq(1, t, 0.1)
WN <- rnorm(length(t_i), 0, 1)
# path
WN_ns <- sqrt(t_i) * WN * sin(t_i)
# total return
sum(WN_ns / t)
# initial stock price plus returns
stock_ret <- cumsum(WN_ns)
stock <- t + stock_ret
if (sum(stock < 0) > 0) {
print("Bankrupt!")
} else {
plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
# simulate returns and then stock price
# white noise
t <- 100
t_i <- seq(1, t, 0.1)
WN <- rnorm(length(t_i), 0, 1)
# path
WN_ns <- sqrt(t_i) * WN * sin(t_i)
# total return
sum(WN_ns / t)
# initial stock price plus returns
stock_ret <- cumsum(WN_ns)
stock <- t + stock_ret
if (sum(stock < 0) > 0) {
print("Bankrupt!")
} else {
plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
# simulate returns and then stock price
# white noise
t <- 100
t_i <- seq(1, t, 0.1)
WN <- rnorm(length(t_i), 0, 1)
# path
WN_ns <- sqrt(t_i) * WN * sin(t_i)
# total return
sum(WN_ns / t)
# initial stock price plus returns
stock_ret <- cumsum(WN_ns)
stock <- t + stock_ret
if (sum(stock < 0) > 0) {
print("Bankrupt!")
} else {
plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
# simulate returns and then stock price
# white noise
t <- 100
t_i <- seq(1, t, 0.1)
WN <- rnorm(length(t_i), 0, 1)
# path
WN_ns <- sqrt(t_i) * WN * sin(t_i)
# total return
sum(WN_ns / t)
# initial stock price plus returns
stock_ret <- cumsum(WN_ns)
stock <- t + stock_ret
if (sum(stock < 0) > 0) {
print("Bankrupt!")
} else {
plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
# simulate returns and then stock price
# white noise
t <- 100
t_i <- seq(1, t, 0.1)
WN <- rnorm(length(t_i), 0, 1)
# path
WN_ns <- sqrt(t_i) * WN * sin(t_i)
# total return
sum(WN_ns / t)
# initial stock price plus returns
stock_ret <- cumsum(WN_ns)
stock <- t + stock_ret
if (sum(stock < 0) > 0) {
print("Bankrupt!")
} else {
plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
# simulate returns and then stock price
# white noise
t <- 100
t_i <- seq(1, t, 0.1)
WN <- rnorm(length(t_i), 0, 1)
# path
WN_ns <- sqrt(t_i) * WN * sin(t_i)
# total return
sum(WN_ns / t)
# initial stock price plus returns
stock_ret <- cumsum(WN_ns)
stock <- t + stock_ret
if (sum(stock < 0) > 0) {
print("Bankrupt!")
} else {
plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
# simulate returns and then stock price
# white noise
t <- 100
t_i <- seq(1, t, 0.1)
WN <- rnorm(length(t_i), 0, 1)
# path
WN_ns <- sqrt(t_i) * WN * sin(t_i)
# total return
sum(WN_ns / t)
# initial stock price plus returns
stock_ret <- cumsum(WN_ns)
stock <- t + stock_ret
if (sum(stock < 0) > 0) {
print("Bankrupt!")
} else {
plot(t_i, stock, type = 'l')
}
mean(stock)
sd(stock)
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/ARIMA.R")
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/ARIMA.R")
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/ARIMA.R")
?arima.sim
?arima
?arima.sim
?list
c(1,2,3)
c(c(1,2,3), c(1,2,3))
list(c(1,2,3), c(1,2,3))
?arima.sim
test_model <- list(order=c(3,0,0), ar=c(0,0,0.5))
test_model <- list(order=c(3,0,0), ar=c(0,0,0.5)) ; test_model
set.seed(5)
arima.sim(test_model, 10)
test_model_1 <- list(order=c(3,0,0), ar=c(0,0,0.5)) ; test_model
test_model_1 <- list(order=c(3,0,0), ar=c(0,0,0.5)) ; test_model_1
test_model_2 <- list(ma=c(0,0,0), ar=c(0,0,0.5)) ; test_model_2
arima.sim(test_model_1, 5)
arima.sim(test_model_2, 5)
arima.sim(test_model_1, 5)
arima.sim(test_model_2, 5)
arima.sim(test_model_2, 5)
arima.sim(test_model_2, 5)
arima.sim(test_model_1, 5)
arima.sim(test_model_1, 200)
arima.sim(test_model_2, 200)
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
arima(arima_1)
arima(arima_2)
arima(arima_1)
?arima.sim
test_model_1 <- list(order=c(3,0,0), ar=c(0,0,0.5)) ; test_model_1
test_model_2 <- list(ar=c(0,0,0), ma=c(0,0,0.5)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
test_model_2 <- list(ar=c(0,0,0), ma=c(0,0,0.5)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
test_model_2 <- list(ar=c(0,0,0), ma=c(0,0,0.5)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
test_model_2 <- list(ar=c(0,0,0.5), ma=c(0,0,0)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
arima(arima_1)
arima(arima_2)
acf(arima_1)
acf(arima_2)
acf(arima_1)
acf(arima_2)
?arma.sim
ts.plot(arima_1)
ts.plot(arima_2)
install.packages(astsa)
install.packages("astsa")
library(astsa)
?sarima
ts = sarima(xdata=arima_1, p=3, d=0, q=0, details=F)
ts
sarima(xdata=arima_2, p=3, d=0, q=0, details=F)
test_model_1 <- list(order=c(3,0,0), ar=c(0,0,1)) ; test_model_1
test_model_2 <- list(ar=c(0,0,1), ma=c(0,0,0)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
test_model_1 <- list(order=c(3,0,0), ar=c(0,0,1.2)) ; test_model_1
test_model_2 <- list(ar=c(0,0,1.2), ma=c(0,0,0)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
test_model_1 <- list(order=c(3,0,0), ar=c(0,0,0.9)) ; test_model_1
test_model_2 <- list(ar=c(0,0,0.9), ma=c(0,0,0)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
arima(arima_1)
?arima
arima(arima_1, order= c(3, 0, 0))
arima(arima_2, order= c(3, 0, 0))
acf(arima_1)
acf(arima_2)
ts.plot(arima_1)
ts.plot(arima_2)
sarima(xdata=arima_1, p=3, d=0, q=0, details=F)
sarima(xdata=arima_2, p=3, d=0, q=0, details=F)
test_model_1 <- list(order=c(3,0,0), ar=c(0.2,0.4,0.6)) ; test_model_1
test_model_2 <- list(ar=c(0.2,0.4,0.6), ma=c(0,0,0)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
test_model_2 <- list(ar=c(0.6, 0.4, 0.2), ma=c(0, 0, 0)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
test_model_2 <- list(ar=c(0.6, 0.4, 0.2), ma=c(0, 0, 0.2)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
test_model_1 <- list(order=c(3, 0 , 0), ar=c(0, 0.4, 0)) ; test_model_1
test_model_2 <- list(ar=c(0, 0.4, 0), ma=c(0, 0, 0)) ; test_model_2
arima_1 <- arima.sim(test_model_1, 200)
arima_2 <- arima.sim(test_model_2, 200)
arima(arima_1, order= c(3, 0, 0))
arima(arima_2, order= c(3, 0, 0))
sarima(xdata=arima_1, p=3, d=0, q=0, details=F)
sarima(xdata=arima_2, p=3, d=0, q=0, details=F)
acf(arima_1)
ts.plot(arima_1)
acf(arima_2)
test_model_1 <- list(order=c(3, 0 , 0), ar=c(0.1, 0.4, 0)) ; test_model_1
arima_1 <- arima.sim(test_model_1, 200)
arima(arima_1, order= c(3, 0, 0))
sarima(xdata=arima_1, p=3, d=0, q=0, details=F)
test_model_1 <- list(order=c(3, 0 , 0), ar=c(0.1, 0.4, 0.2)) ; test_model_1
arima_1 <- arima.sim(test_model_1, 200)
arima(arima_1, order= c(3, 0, 0))
sarima(xdata=arima_1, p=3, d=0, q=0, details=F)
test_model_1 <- list(order=c(3, 0 , 0), ar=c(0.2, 0.4, 0.2)) ; test_model_1
arima_1 <- arima.sim(test_model_1, 200)
arima(arima_1, order= c(3, 0, 0))
sarima(xdata=arima_1, p=3, d=0, q=0, details=F)
test_model_1 <- list(order=c(3, 0 , 0), ar=c(0.5, 0.5, 0.1)) ; test_model_1
arima_1 <- arima.sim(test_model_1, 200)
test_model_1 <- list(order=c(3, 0 , 0), ar=c(0.5, 0.5, 0)) ; test_model_1
arima_1 <- arima.sim(test_model_1, 200)
test_model_1 <- list(order=c(3, 0 , 0), ar=c(0.5, 0.4, 0)) ; test_model_1
arima_1 <- arima.sim(test_model_1, 200)
arima(arima_1, order= c(3, 0, 0))
sarima(xdata=arima_1, p=3, d=0, q=0, details=F)
ts.plot(arima_1)
acf(arima_1)
?acf
pacf(arima_1)
pacf(arima_2)
test_model_2 <- list(ar=c(0, 0.4, 0), ma=c(0, 0.4, 0)) ; test_model_2
arima_2 <- arima.sim(test_model_2, 200)
arima(arima_2, order= c(3, 0, 0))
arima(arima_2, order= c(3, 3, 0))
test_model_2 <- list(ar=c(0, 0.4, 0), ma=c(0, 0.4, 0)) ; test_model_2
arima_2 <- arima.sim(test_model_2, 200)
arima(arima_2, order= c(3, 3, 0))
?arima
test_model_2 <- list(ar=c(0, 0.4, 0), ma=c(0, 0.4, 0)) ; test_model_2
arima_2 <- arima.sim(test_model_2, 200)
arima(arima_2, order= c(3, 0, 3))
acf(arima_2)
pacf(arima_2)
ts.plot(arima_2)
sarima(xdata=arima_2, p=3, d=0, q=3, details=F)
?matrix
matrix(1:9, nrow= 3, ncol = 3)
matrix(1:9, nrow= 3, ncol = 3, byrow = TRUE)
M <- matrix(1:9, nrow= 3, ncol = 3, byrow = TRUE)
solve(M)
?solve
?identify
?identity
identity(M)
?diag
diag(1, 3, 3)
I <- diag(1, 3, 3)
solve(M, I)
M %*% I
?solve
A <- matrix(1:4, 2, 2, byrow= TRUE)
solve(A)
solve(M)
M <- matrix(c(1,2,3,4,5,6,7,8,9), nrow= 3, ncol = 3, byrow = TRUE)
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/ARIMA.R", echo=TRUE)
M <- matrix(c(1,2,3,5,5,6,7,8,9), nrow= 3, ncol = 3, byrow = TRUE)
solve(M)
M_s <- solve(M)
M %*% M_s
round(M %*% M_s)
?round
round(M %*% M_s, 2)
round(M %*% M_s, 3)
A_s <- solve(A)
round(A %*% A_s, 2)
WN <- rnorm(300)
X <- cumsum(WN)
n <- 300
t <- seq(0,n, by=1)
n <- 300
t <- seq(1,n, by=1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
plot(t, X_ma)
X_ma <- ma(X, 3)
plot(t, X_ma)
library(forcast)
n <- 300
t <- seq(1,n, by=1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
plot(t, X_ma)
library(forecast)
n <- 300
t <- seq(1,n, by=1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
plot(t, X_ma)
plot(t, X_ma, type = 'l')
mean(X)
mean(X_ma)
mean(X_ma[:])
mean(X_ma[,])
mean(X_ma[,:,])
mean(X_ma[1:300])
head(X_ma)
?ts
library(forecast)
n <- 300
t <- seq(1,n, by=1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
plot(t, X_ma, type = 'l')
X_ma[1:300]
?ma
X_ma <- X_ma[!is.na(X_ma)]
X_ma
t_ma <- seq(1, length(X_ma), by = 1)
length(t_ma)
X_ma <- ma(X, 3)
X_ma <- ma(X, 3)
X_ma <- X_ma[!is.na(X_ma)]
t_ma <- seq(1, length(X_ma), by = 1)
plot(t, X_ma, type = 'l')
plot(t_ma, X_ma, type = 'l')
mean(X)
mean(X_ma)
n <- 10000
t <- seq(1,n, by = 1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
X_ma <- X_ma[!is.na(X_ma)]
t_ma <- seq(1, length(X_ma), by = 1)
plot(t_ma, X_ma, type = 'l')
mean(X)
mean(X_ma)
acf(X_ma)
acf(X)
cov(X_ma, X_ma)
1/3 * std(X_ma)
1/3 * sd(X_ma)
plot(t_ma, X_ma, type = 'l')
# check to see if the means converge
mean(X)
mean(X_ma)
cov(X_ma, X_ma)
sd(X_ma)
?sd
var(X_ma)
cov(X_ma, X_ma)
1/3 * var(X_ma)
cov(X_ma[1:9999], X_ma[2:10000])
cov(X_ma[1:length(X_ma)-1], X_ma[1+1:length(X_ma)])
length(X_ma)-1
cov(X_ma[1:(length(X_ma)-1)], X_ma[(1+1):length(X_ma)])
1/3 * var(X_ma)
2/9 * var(X_ma)
cov(X_ma[1:-1)], X_ma[(1+1):length(X_ma)])
cov(X_ma[1:-1], X_ma[(1+1):length(X_ma)])
cov(X_ma[1:(length(X_ma)-1)], X_ma[(1+1):length(X_ma)])
2/9 * var(X_ma)
cov(X_ma[1:(length(X_ma)-1)], X_ma[2:length(X_ma)])
cov(X_ma[1:9997)], X_ma[2:1998])
cov(X_ma[1:9997], X_ma[2:1998])
cov(X_ma[1:9997], X_ma[2:9998])
cov(X_ma[1:(length(X_ma)-2)], X_ma[(1+2):length(X_ma)])
cov(X_ma[1:(length(X_ma)-3)], X_ma[(1+3):length(X_ma)])
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Covariance/Linear Regression.R", echo=TRUE)
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/Unbiased Symmetrical Moving Average.R", echo=TRUE)
cov(WN, WN)
cov(rnorm(100000), rnorm(10000))
cov(rnorm(100000), rnorm(100000))
cov(rnorm(1000), rnorm(1000))
# generate random walk
n <- 10000 # convergance only becomes clear with many observations
t <- seq(1,n, by = 1)
WN <- rnorm(n) # white noise
X <- cumsum(WN) # random walk without drift
# plot the random walk
plot(t, X, type = 'l')
# moving average of order 3
X_ma <- ma(X, 3)
# discard NA values
X_ma <- X_ma[!is.na(X_ma)]
# plot MA
t_ma <- seq(1, length(X_ma), by = 1)
plot(t_ma, X_ma, type = 'l')
# check to see if the means converge
mean(X)
mean(X_ma)
?sd
cov(X_ma, X_ma)
var(X_ma)
cov(X_ma[1:(length(X_ma)-1)], X_ma[(1+1):length(X_ma)])
cov(WN, WN)
# generate random walk
n <- 100000 # convergance only becomes clear with many observations
WN <- rnorm(n) # white noise
cov(WN, WN)
# generate random walk
n <- 100000 # convergance only becomes clear with many observations
t <- seq(1,n, by = 1)
WN <- rnorm(n) # white noise
X <- cumsum(WN) # random walk without drift
# plot the random walk
plot(t, X, type = 'l')
# moving average of order 3
X_ma <- ma(X, 3)
# discard NA values
X_ma <- X_ma[!is.na(X_ma)]
# plot MA
t_ma <- seq(1, length(X_ma), by = 1)
plot(t_ma, X_ma, type = 'l')
# check to see if the means converge
mean(X)
mean(X_ma)
?sd
cov(X_ma, X_ma)
var(X_ma)
cov(WN, WN)
WN[1:-1]
cov(WN[1:10000], WN[2:10001])
cov(WN[1:(length(WN)-1)], WN[(1+1):length(WN)])
cov(X, X)
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/Unbiased Symmetrical Moving Average.R", echo=TRUE)
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/Unbiased Symmetrical Moving Average.R")
