round(M %*% M_s, 2)
round(M %*% M_s, 3)
A_s <- solve(A)
round(A %*% A_s, 2)
WN <- rnorm(300)
X <- cumsum(WN)
n <- 300
t <- seq(0,n, by=1)
n <- 300
t <- seq(1,n, by=1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
plot(t, X_ma)
X_ma <- ma(X, 3)
plot(t, X_ma)
library(forcast)
n <- 300
t <- seq(1,n, by=1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
plot(t, X_ma)
library(forecast)
n <- 300
t <- seq(1,n, by=1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
plot(t, X_ma)
plot(t, X_ma, type = 'l')
mean(X)
mean(X_ma)
mean(X_ma[:])
mean(X_ma[,])
mean(X_ma[,:,])
mean(X_ma[1:300])
head(X_ma)
?ts
library(forecast)
n <- 300
t <- seq(1,n, by=1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
plot(t, X_ma, type = 'l')
X_ma[1:300]
?ma
X_ma <- X_ma[!is.na(X_ma)]
X_ma
t_ma <- seq(1, length(X_ma), by = 1)
length(t_ma)
X_ma <- ma(X, 3)
X_ma <- ma(X, 3)
X_ma <- X_ma[!is.na(X_ma)]
t_ma <- seq(1, length(X_ma), by = 1)
plot(t, X_ma, type = 'l')
plot(t_ma, X_ma, type = 'l')
mean(X)
mean(X_ma)
n <- 10000
t <- seq(1,n, by = 1)
WN <- rnorm(n)
X <- cumsum(WN)
plot(t, X, type = 'l')
X_ma <- ma(X, 3)
X_ma <- X_ma[!is.na(X_ma)]
t_ma <- seq(1, length(X_ma), by = 1)
plot(t_ma, X_ma, type = 'l')
mean(X)
mean(X_ma)
acf(X_ma)
acf(X)
cov(X_ma, X_ma)
1/3 * std(X_ma)
1/3 * sd(X_ma)
plot(t_ma, X_ma, type = 'l')
# check to see if the means converge
mean(X)
mean(X_ma)
cov(X_ma, X_ma)
sd(X_ma)
?sd
var(X_ma)
cov(X_ma, X_ma)
1/3 * var(X_ma)
cov(X_ma[1:9999], X_ma[2:10000])
cov(X_ma[1:length(X_ma)-1], X_ma[1+1:length(X_ma)])
length(X_ma)-1
cov(X_ma[1:(length(X_ma)-1)], X_ma[(1+1):length(X_ma)])
1/3 * var(X_ma)
2/9 * var(X_ma)
cov(X_ma[1:-1)], X_ma[(1+1):length(X_ma)])
cov(X_ma[1:-1], X_ma[(1+1):length(X_ma)])
cov(X_ma[1:(length(X_ma)-1)], X_ma[(1+1):length(X_ma)])
2/9 * var(X_ma)
cov(X_ma[1:(length(X_ma)-1)], X_ma[2:length(X_ma)])
cov(X_ma[1:9997)], X_ma[2:1998])
cov(X_ma[1:9997], X_ma[2:1998])
cov(X_ma[1:9997], X_ma[2:9998])
cov(X_ma[1:(length(X_ma)-2)], X_ma[(1+2):length(X_ma)])
cov(X_ma[1:(length(X_ma)-3)], X_ma[(1+3):length(X_ma)])
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Covariance/Linear Regression.R", echo=TRUE)
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/Unbiased Symmetrical Moving Average.R", echo=TRUE)
cov(WN, WN)
cov(rnorm(100000), rnorm(10000))
cov(rnorm(100000), rnorm(100000))
cov(rnorm(1000), rnorm(1000))
# generate random walk
n <- 10000 # convergance only becomes clear with many observations
t <- seq(1,n, by = 1)
WN <- rnorm(n) # white noise
X <- cumsum(WN) # random walk without drift
# plot the random walk
plot(t, X, type = 'l')
# moving average of order 3
X_ma <- ma(X, 3)
# discard NA values
X_ma <- X_ma[!is.na(X_ma)]
# plot MA
t_ma <- seq(1, length(X_ma), by = 1)
plot(t_ma, X_ma, type = 'l')
# check to see if the means converge
mean(X)
mean(X_ma)
?sd
cov(X_ma, X_ma)
var(X_ma)
cov(X_ma[1:(length(X_ma)-1)], X_ma[(1+1):length(X_ma)])
cov(WN, WN)
# generate random walk
n <- 100000 # convergance only becomes clear with many observations
WN <- rnorm(n) # white noise
cov(WN, WN)
# generate random walk
n <- 100000 # convergance only becomes clear with many observations
t <- seq(1,n, by = 1)
WN <- rnorm(n) # white noise
X <- cumsum(WN) # random walk without drift
# plot the random walk
plot(t, X, type = 'l')
# moving average of order 3
X_ma <- ma(X, 3)
# discard NA values
X_ma <- X_ma[!is.na(X_ma)]
# plot MA
t_ma <- seq(1, length(X_ma), by = 1)
plot(t_ma, X_ma, type = 'l')
# check to see if the means converge
mean(X)
mean(X_ma)
?sd
cov(X_ma, X_ma)
var(X_ma)
cov(WN, WN)
WN[1:-1]
cov(WN[1:10000], WN[2:10001])
cov(WN[1:(length(WN)-1)], WN[(1+1):length(WN)])
cov(X, X)
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/Unbiased Symmetrical Moving Average.R", echo=TRUE)
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Time Series/Unbiased Symmetrical Moving Average.R")
WN_1 <- rnorm(500)
?ma
?ma
library(forecast)
WN_1 <- rnorm(500)
wn_1 <- rnorm(500)
wn_ma_3 <- ma(wn_1)
wn_ma_3 <- ma(wn_1, order = 3)
wn_ma_3 <- wn_ma_3[!is.na(wn_ma_3)]
wn_ma_10 <- ma(wn_1, order = 10)
wn_ma_10 <- wn_ma_10[!is.na(wn_ma_10)]
wn_ma_5 <- ma(wn_1, order = 5)
wn_ma_5 <- wn_ma_5[!is.na(wn_ma_5)]
wn_ma_6 <- ma(wn_1, order = 6)
wn_ma_6 <- wn_ma_6[!is.na(wn_ma_6)]
U <- 1:10
ma(U, 2)
ma(U, 3)
ma(U, 4)
ma(U, 5)
U <- (1:10)**2
ma(U, 5)
ma(U, 1)
ma(U, 2)
ma(U, 3)
ma(U, 4)
ma(U, 5)
?ma
ma(U, 4)
ma(U, 4, order = FALSE)
ma(U, 4, centre = FALSE)
ma(U, 4, centre = TRUE)
ma(U, 4, centre = FALSE)
U <- 1:15
ma(U, 5, centre = FALSE)
ma(U, 10, centre = FALSE)
ma(U, 10, centre = TRUE)
mean(ma(wn_1,3))
mean(ma(wn_ma_3)
mean(wn_ma_3)
mean(wn_ma_3)
mean(wn_ma_10)
shift_index()
# index shift
function shift_index(tau = 0) {
shift_index()
# index shift
function shift_index(tau <- 0) {
shift_index()
# index shift
shift_index <- function(tau = 0) {
print(tau)
}
shift_index()
# index shift
autocov <- function(A, B, tau = 0) {
A_shifted <- A[1:(length(A)-tau)]
B_shifted <- B[(1+tau):length(B)]
}
shift_index(wn_1, wn_1)
# index shift
autocov <- function(A, B, tau = 0) {
A_shifted <- A[1:(length(A)-tau)]
B_shifted <- B[(1+tau):length(B)]
return cov(A_shifted, B_shifted)
# index shift
autocov <- function(A, B, tau = 0) {
A_shifted <- A[1:(length(A)-tau)]
B_shifted <- B[(1+tau):length(B)]
return (cov(A_shifted, B_shifted))
}
shift_index(wn_1, wn_1)
shift_index(wn_1, wn_1, tau = 0)
A_shifted <- wn_1[1:(length(wn_1)-1)]
B_shifted <- wn_1[(1+1):length(wn_1)]
plus_one <- function(x) {
print(x + 1)
}
plus_one(1:3)
# index shift
autocov <- function(A, B, tau = 0) {
A_shifted <- A[1:(length(A)-tau)]
B_shifted <- B[(1+tau):length(B)]
print(cov(A_shifted, B_shifted))
}
shift_index(wn_1, wn_1)
plus_one <- function(x, y) {
print(x + 1)
print(y + 1)
}
plus_one(x1, x1)
x1 <- 1:3
plus_one(x1, x1)
shift_index(wn_1, wn_1)
wn_1 <- rnorm(500)
# index shift
autocov <- function(A, B, tau = 0) {
A_shifted <- A[1:(length(A)-tau)]
B_shifted <- B[(1+tau):length(B)]
print(cov(A_shifted, B_shifted))
}
shift_index(wn_1, wn_1)
shift_index(A = wn_1, B = wn_1)
# index shift
autocov <- function(V, tau = 0) {
V_1 <- V[1:(length(V)-tau)]
V_2 <- V[(1+tau):length(V)]
print(cov(V_1, V_2))
}
autocov(wn_1)
autocov(wn_1, 1)
autocov(wn_1, 2)
autocov(wn_1, 10)
wn_2 <- rnorm(10000)
autocov(wn_2)
autocov(wn_2, 1)
var(wn_2)
wn_2_ma_3 <- ma(wn_2, 3)
wn_2_ma_3 <- wn_2_ma_3[!is.na(wn_2_ma_3)]
var(wn_2_ma_3)
autocov(wn_2_ma_3)
autocov(wn_2_ma_3, 1) # autocov with tau 0 is 1/3 the variance of wn
var(wn_2_ma_3) * 2/9
var(wn_2) * 2/9
autocov(wn_2_ma_3, -1)
autocov(wn_2_ma_3, 2)
var(wn_2)
var(wn_2) * 1/9
autocov(wn_2_ma_3, 3) # autocov with tau 1 is 1/9 the variance of wn
wn <- rnorm(10000)
mean(wn)
var(wn)
# autocovariance
autocov <- function(V, tau = 0) {
V_1 <- V[1:(length(V)-tau)]
V_2 <- V[(1+tau):length(V)]
print(cov(V_1, V_2))
}
autocov(wn)
for (i in -2:2) {
autocov(wn, i)
}
# autocovariance
autocov <- function(V, tau = 0) {
tau <- abs(tau)
V_1 <- V[1:(length(V)-tau)]
V_2 <- V[(1+tau):length(V)]
print(cov(V_1, V_2))
}
autocov(wn)
for (i in -2:2) {
autocov(wn, i)
}
for (i in -2:2) {
paste("tau: ", i, autocov(wn, i))
}
autocov(wn)
for (i in -2:2) {
paste("tau: ", i, "autocov: ", autocov(wn, i))
}
?paste
for (i in -2:2) {
paste("tau:", i, "autocov:", autocov(wn, i))
}
for (i in -2:2) {
paste("tau:", i, "autocov:", round(autocov(wn, i), 3))
}
paste0("tau:", i, "autocov:", round(autocov(wn, i), 3))
?paste0
for (i in -2:2) {
paste0("tau:", i, "autocov:", round(autocov(wn, i), 4))
}
?sprintf
for (i in -2:2) {
sprintf("tau is %i, autocov is %f", i, round(autocov(wn, i))))
sprintf("tau is %i, autocov is %f", i, round(autocov(wn, i)))
sprintf("tau is %i, autocov is %f", i, round(autocov(wn, i), 4))
for (i in -2:2) {
sprintf("tau is %i, autocov is %f", i, round(autocov(wn, i), 4))
}
for (i in -2:2) {
sprintf("tau is %i, autocov is %s", i, autocov(wn, i)))
for (i in -2:2) {
sprintf("tau is %i, autocov is %s", i, autocov(wn, i))
}
sprintf("tau is %i, autocov is %s", 1, autocov(wn, 1)
for (i in -2:2) {
for (i in -2:2) {
a <- autocov(wn, i)
sprintf("tau is %i, autocov is %s", i, a)
}
# autocovariance
autocov <- function(V, tau = 0) {
tau <- abs(tau)
V_1 <- V[1:(length(V)-tau)]
V_2 <- V[(1+tau):length(V)]
return(cov(V_1, V_2))
}
for (i in -2:2) {
a <- autocov(wn, i)
sprintf("tau is %i, autocov is %s", i, a)
}
sprintf("tau is %i, autocov is %s", 1, autocov(wn, 1)
for (i in -2:2) {
for (i in -2:2) {
a <- autocov(wn, i)
sprintf("tau is %i, autocov is %s", i, a)
}
sprintf("tau is %i, autocov is %f", 1, autocov(wn, 1)
autocov(wn, 1)
sprintf("tau is %i, autocov is %f", 1, autocov(wn, 1))
autocov(wn)
for (i in -2:2) {
a <- autocov(wn, i)
sprintf("tau is %i, autocov is %f", i, a)
}
sprintf("tau is %i, autocov is %f", -1, autocov(wn, 1))
# autocovariance
autocov <- function(V, tau = 0) {
tau <- abs(tau)
V_1 <- V[1:(length(V)-tau)]
V_2 <- V[(1+tau):length(V)]
return(cov(V_1, V_2))
}
autocov(wn)
for (i in -2:2) {
a <- autocov(wn, i)
sprintf("tau is %i, autocov is %f", i, a)
}
sprintf("tau is %i, autocov is %f", -1, autocov(wn, 1))
a <- autocov(wn, i)
a <- autocov(wn, -1)
sprintf("tau is %i, autocov is %f", -1, a)
# autocovariance
autocov <- function(V, tau = 0) {
tau <- abs(tau)
V_1 <- V[1:(length(V)-tau)]
V_2 <- V[(1+tau):length(V)]
return(cov(V_1, V_2))
}
for (j in -2:2) {
a <- autocov(wn, j)
sprintf("tau is %i, autocov is %f", j, a)
}
a <- autocov(wn, -1)
sprintf("tau is %i, autocov is %f", -1, a)
for (j in -2:2) {
sprintf("tau is %i", j)
}
for (j in -2:2) {
sprintf("tau is %s", j)
}
for (j in -2:2) {
print(j)
sprintf("tau is %s", j)
}
?print
for (j in -2:2) {
sprintf("tau is %s\n", j)
}
for (j in -2:2) {
sprintf("tau is %i\n", j)
}
sprintf("%f", pi)
sprintf("pi is %f", pi)
# autocovariance
autocov <- function(V, tau = 0) {
tau <- abs(tau)
V_1 <- V[1:(length(V)-tau)]
V_2 <- V[(1+tau):length(V)]
return(cov(V_1, V_2))
}
for (j in -2:2) {
paste0("tau is ", j, "autocov is ", autocov(wn, j))
}
for (j in 1:2) {
paste0("tau is ", j, "autocov is ", autocov(wn, j))
}
paste0("tau is ", 1, "autocov is ", autocov(wn, 1))
paste0("tau is ", 1, ", autocov is ", autocov(wn, 1))
sprintf("tau is %i, autocov is %.4f", 1, 0.334)
for (j in -2:2) {
sprintf("tau is %i, autocov is %.4f", j, autocov(wn, j))
}
for (j in -2:2) {
print(j)
}
for (j in -2:2) {
print("j: ", j)
}
for (j in -2:2) {
paste("j: ", j)
}
for (j in -2:2) {
print(paste("j: ", j))
}
for (j in -2:2) {
print(sprintf("tau is %i, autocov is %.4f", j, autocov(wn, j)))
}
?dif
?diff
wn_diff_1 <- diff(wn, 1)
mean(wn_diff_1)
var(wn_diff_1)
for (j in -2:2) {
print(sprintf("tau is %i, autocov is %.4f", j, autocov(wn_diff_1, j)))
}
for (j in 0:2) {
print(sprintf("tau is %i, autocov is %.4f", j, autocov(wn_diff_1, j)))
}
for (j in 0:3) {
print(sprintf("tau is %i, autocov is %.4f", j, autocov(wn_diff_1, j)))
}
for (j in -2:2) {
print(sprintf("tau is %i, autocov is %.4f", j, autocov(wn_diff_1, j)))
}
ts.plot(wn_diff_1)
wn_diff_2 <- diff(wn, 2)
mean(wn_dif_2)
mean(wn_diff_2)
var(wn_diff_2)
for (j in -2:2) {
print(sprintf("tau is %i, autocov is %.4f", j, autocov(wn_diff_2, j)))
}
ts.plot(wn_diff_2)
ts.plot(cumsum(wn_diff_2))
ts.plot(cumsum(wn_diff_2), type = "l")
?ts.plot
ts.plot(cumsum(wn))
ts.plot(cumsum(wn_diff_1))
mean(wn_diff_1)
var(wn_diff_1)
?rt
twn <- rt(5000)
twn <- rt(5000, 4)
ts.plot(cumsum(twn))
ts.plot(diff(twn,1))
mean(diff(twn, 1))
mean(twn)
var(twn)
twn <- rt(5000, 10)
ts.plot(cumsum(twn))
ts.plot(diff(twn,1))
mean(twn)
var(twn)
mean(diff(twn, 1))
