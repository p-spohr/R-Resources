exp(1)
diff(log_p)
A_stock_r_log <- log(A_stock_r)
A_stock_r_log_ren <- diff(A_stock_r_log)
plot(A_stock_r_log_ren, type='l')
A_stock_r_log_ren
sort(A_stock_r_log_ren)
A_sort <- sort(A_stock_r_log_ren)
A_sort[length(A_sort) * 0.99]
A_sort[length(A_sort) * 0.01]
A_stock <- stocks[0,1]
A_stock <- stocks[0,1]
A_stock_ret <- apply(A_stock, 2, diff)
A_stock <- stocks[,1]
A_stock_ret <- apply(A_stock, 2, diff)
A_stock <- stocks[,1]
A_stock_ret <- apply(A_stock, 1, diff)
A_stock
?apply
A_stock_ret <- diff(A_stock)
A_stock_L <- -A_stock_ret
A_stock_L_sorted <- sort(A_stock_L)
A_stock_L_sorted[length(A_stock_l_sorted) * 0.99]
A_stock_L_sorted[length(A_stock_L_sorted) * 0.99]
A_stock_L_sorted[length(A_stock_L_sorted) * 0.01]
A_stock <- log(stocks[,1])
A_stock_ret <- diff(A_stock)
A_stock_L <- -A_stock_ret
A_stock_L_sorted <- sort(A_stock_L)
A_stock_L_sorted[length(A_stock_L_sorted) * 0.01]
A_stock_L_sorted[length(A_stock_L_sorted) * 0.99]
stocks <- read.csv("stocks.csv")
par(mfrow=c(3,1), mai=c(0.3,0.55,0,0))
plot(stocks[,1], type='l', ylab = 'A')
plot(stocks[,2], type='l', ylab = 'B')
plot(stocks[,3], type='l', ylab = 'C')
stock_log <- log(stocks)
stock_log_ret <- apply(stock_log, 2, diff)
par(mfrow=c(3,1), mai=c(0.3,0.55,0,0))
plot(stock_log_ret[,1], type='l', ylab = 'A')
plot(stock_log_ret[,2], type='l', ylab = 'B')
plot(stock_log_ret[,3], type='l', ylab = 'C')
port_val <- 1000
# ?sort
A_stock_log_L <- sort(stock_log_ret[,1], decreasing=FALSE) * -1 # NEED LOSS NOT RETURNS
# alpha = 0.99
# all to the right of 1 - alpha on the density function is considered the Value at Risk
nalpha <- ceiling(length(A_stock_log_L) * 0.99)
A_VaR <-  A_stock_log_ret[nalpha] * port_val
A_VaR <-  A_stock_log_L[nalpha] * port_val
?sort
# ?sort
A_stock_log_L <- sort(stock_log_L[,1], decreasing=FALSE) * -1 # NEED LOSS NOT RETURNS
A_stock_L <- -1 * sort(stock_log_ret[,1], decreasing=FALSE) # NEED LOSS NOT RETURNS
port_val <- 1000
# alpha = 0.99
# all to the right of 1 - alpha on the density function is considered the Value at Risk
nalpha <- ceiling(length(A_stock_L) * 0.99)
A_VaR <-  A_stock_L[nalpha] * port_val
quantile(A_stock_log_ret, p = 0.99, type=1) * port_val
quantile(A_stock_L, p = 0.99, type=1) * port_val
A_stock_L <- sort(stock_log_ret[,1], decreasing=FALSE) # NEED LOSS NOT RETURNS
port_val <- 1000
# alpha = 0.99
# all to the right of 1 - alpha on the density function is considered the Value at Risk
nalpha <- ceiling(length(A_stock_L) * 0.99)
A_VaR <-  A_stock_L[nalpha] * port_val
A_stock_L <- stock_log_ret[,1] # NEED LOSS NOT RETURNS
sort(A_stock_L, decreasing=FALSE)
A_stock_L <- stock_log_ret[,1] # NEED LOSS NOT RETURNS
A_stock_L <- sort(A_stock_L, decreasing=FALSE)
# alpha = 0.99
# all to the right of 1 - alpha on the density function is considered the Value at Risk
nalpha <- ceiling(length(A_stock_L) * 0.99)
A_VaR <-  A_stock_L[nalpha] * port_val
quantile(A_stock_L, p = 0.99, type=1) * port_val
# ?sort
A_stock_L
A_stock_L <- -stock_log_ret[,1] # NEED LOSS NOT RETURNS
A_stock_L <- sort(A_stock_L, decreasing=FALSE)
# ?sort
A_stock_L
# alpha = 0.99
# all to the right of 1 - alpha on the density function is considered the Value at Risk
nalpha <- ceiling(length(A_stock_L) * 0.99)
A_VaR <-  A_stock_L[nalpha] * port_val
quantile(A_stock_L, p = 0.99, type=1) * port_val
A_VaR <-  A_stock_L[nalpha] * port_val ; A_VaR
A_VaR_Normal <- (A_mu + A_sigma * qnorm(alpha)) * V0
A_mu <- mean(ly1)
A_mu <- mean(A_stock_L)
A_sigma <- sd(A_stock_L)
A_VaR_Normal <- (A_mu + A_sigma * qnorm(alpha)) * V0
# alpha = 0.99
# all to the right of 1 - alpha on the density function is considered the Value at Risk
alpha <- 0.99
nalpha <- ceiling(length(A_stock_L) * alpha)
A_VaR <-  A_stock_L[nalpha] * port_val ; A_VaR
quantile(A_stock_L, p = 0.99, type=1) * port_val
A_mu <- mean(A_stock_L)
A_sigma <- sd(A_stock_L)
A_VaR_Normal <- (A_mu + A_sigma * qnorm(alpha)) * V0
A_VaR_Normal <- (A_mu + A_sigma * qnorm(alpha)) * portfolio_value
A_VaR_Normal <- (A_mu + A_sigma * qnorm(alpha)) * port_val
VaR1_Normal
# t-Distribution
install.packages('QRM')
library(QRM)
?fit.st
model_t <- fit.st(A_stock_L)
model_t$par.ests
A_VaR_t <-  (model_t$par.ests["mu"] +
model_t$par.ests["sigma"]*qt(alpha, df = model_t$par.ests["nu"])) * port_val
VaR1_t
A_VaR_t
A_ES <- (1-alpha) ** -1 * mean(A_stock_L - A_VaR) + A_VaR
A_ES <- (1/ (1-alpha)) * mean(A_stock_L - A_VaR) + A_VaR
A_ES <- (1/ (1-alpha)) * mean(A_stock_L[A_stock_L > A_VaR])
# alpha = 0.99
# all to the right of 1 - alpha on the density function is considered the Value at Risk
alpha <- 0.99
nalpha <- ceiling(length(A_stock_L) * alpha)
A_VaR_port <-  A_stock_L[nalpha] * port_val ; A_VaR
quantile(A_stock_L, p = 0.99, type=1) * port_val
#### Expected Shortfall of Stock A ####
A_VaR <- A_stock_L[ceiling(length(A_stock_L) * alpha)]
A_ES <- (1/ (1-alpha)) * mean(A_stock_L[A_stock_L > A_VaR])
A_ES <- (1/ (1-alpha)) * mean(A_stock_L[A_stock_L > A_VaR]) * port_val
A_ES <- ((1/ (1-alpha)) * mean(A_stock_L - A_VaR) + A_VaR) * port_val
A_ES <- (1/ (1-alpha)) * mean(A_stock_L[A_stock_L > A_VaR]) * port_val
ES1_HS <- mean(A_stock_L[ceiling(length(A_stock_L):,]) * port_val
ES1_HS <- mean(A_stock_L[ceiling(length(A_stock_L):]) * port_val
ES1_HS <- mean(A_stock_L[ceiling(length(A_stock_L)):length(A_stock_L)]) * port_val
ES1_HS <- mean(A_stock_L[ceiling(length(A_stock_L)):,]) * port_val
ES1_HS <- mean(A_stock_L[ceiling(length(A_stock_L)):]) * port_val
ES1_HS <- mean(A_stock_L[ceiling(length(A_stock_L)):-1]) * port_val
A_stock_L[ceiling(length(A_stock_L)):length(A_stock_L)]
A_stock_L[ceiling(length(A_stock_L)) * alpha:length(A_stock_L)]
A_stock_L[ceiling(length(A_stock_L) * alpha) :length(A_stock_L)]
ES1_HS <- mean(A_stock_L[ceiling(length(A_stock_L) * alpha):length(A_stock_L)]) * port_val
#### Expected Shortfall of Stock A ####
A_VaR <- (1/ (1-alpha)) * mean(A_stock_L[A_stock_L > A_VaR])
A_ES <- mean(A_stock_L[A_stock_L > A_VaR]) * port_value
A_ES <- mean(A_stock_L[A_stock_L > A_VaR]) * port_val
A_stock_L[A_stock_L > A_VaR]
#### Expected Shortfall of Stock A ####
A_VaR <- A_stock_L[ceiling(length(A_stock_L) * alpha)]
A_ES <- mean(A_stock_L[A_stock_L > A_VaR]) * port_val
ES1_N_int = (A_mu + A_sigma*integrate(integrand,qnorm(alpha),Inf)$value / (1-alpha)) * port_val
integrand = function(q){q * dnorm(q)}
ES1_N_int = (A_mu + A_sigma*integrate(integrand,qnorm(alpha),Inf)$value / (1-alpha)) * port_val
ES1_N_int
stocks <- read.csv("stocks.csv")
head(stocks)
par(mfrow=c(3,1), mai=c(0.3,0.55,0,0))
plot(stocks[,1], type='l', ylab = 'A')
plot(stocks[,2], type='l', ylab = 'B')
plot(stocks[,3], type='l', ylab = 'C')
stock_log <- log(stocks)
stock_log_ret <- apply(stock_log, 2, diff)
par(mfrow=c(3,1), mai=c(0.3,0.55,0,0))
plot(stock_log_ret[,1], type='l', ylab = 'A')
plot(stock_log_ret[,2], type='l', ylab = 'B')
plot(stock_log_ret[,3], type='l', ylab = 'C')
#### Value at Risk of Stock A ####
port_val <- 1000
A_stock_L <- -stock_log_ret[,1] # NEED LOSS NOT RETURNS
A_stock_L <- sort(A_stock_L, decreasing=FALSE)
# ?sort
A_stock_L
# alpha = 0.99
# all to the right of 1 - alpha on the density function is considered the Value at Risk
alpha <- 0.99
nalpha <- ceiling(length(A_stock_L) * alpha)
nalpha <- ceiling(length(A_stock_L) * alpha) # index of vector with 99%-VaR
A_VaR_port <-  A_stock_L[nalpha] * port_val ; A_VaR
A_VaR <-  A_stock_L[nalpha] ; A_VaR
# portfolio VaR for A Stock
A_VaR * port_val
quantile(A_stock_L, p = 0.99, type=1) * port_val
# Normal Distribution
A_mu <- mean(A_stock_L)
A_sigma <- sd(A_stock_L)
A_VaR_Normal <- (A_mu + A_sigma * qnorm(alpha)) * port_val
# t-Distribution
# install.packages('QRM')
library(QRM)
model_t <- fit.st(A_stock_L)
model_t$par.ests
A_VaR_t <-  (model_t$par.ests["mu"] +
model_t$par.ests["sigma"] *
qt(alpha, df = model_t$par.ests["nu"])) * port_val
A_VaR_t
#### Expected Shortfall of Stock A ####
A_ES <- mean(A_stock_L[A_stock_L > A_VaR]) * port_val
integrand = function(q){q * dnorm(q)}
N_ES = (A_mu + A_sigma*integrate(integrand,qnorm(alpha),Inf)$value / (1-alpha)) * port_val
N_ES
stock_weights <- transpose(c(0.3, 0.2, 0.5))
weighted_stock_val <- stocks %*% stock_weights
stock_weights <- c(0.3, 0.2, 0.5)
weighted_stock_val <- stocks %*% stock_weights
dim(stock_weights)
stock_weights <- matrix(c(0.3, 0.2, 0.5))
dim(stock_weights)
dim(stocks)
dim(stock_weights)
weighted_stock_val <- stocks %*% stock_weights
?dim
stock_weights <- matrix(c(0.3, 0.2, 0.5))
dim(stocks)
dim(stock_weights)
stock_weights
stocks
dim(stock_weights)
# ?dim
dim(stocks)
weighted_stock_val <- stocks %*% stock_weights
stock_weights_mat <- matrix(c(0.3, 0.2, 0.5))
stocks_mat <- matrix(stocks)
# ?dim
dim(stocks_mat)
dim(stock_weights)
type(stocks)
class(stocks)
stock_weights_mat <- data.frame(c(0.3, 0.2, 0.5))
stock_weights
# ?dim
dim(stocks_mat)
dim(stock_weights)
# ?dim
dim(stocks)
dim(stock_weights)
weighted_stock_val <- stocks %*% stock_weights
stocks_mat <- matrix(stocks, ncol = 3, byrow = FALSE)
stocks_mat
stocks_mat <- matrix(stocks, ncol = 3, byrow = TRUE)
stocks_mat
stocks
stock_weights <- data.frame(c(0.3, 0.2, 0.5))
stock_weights
stock_weights <- data.frame(c(0.3, 0.2, 0.5))
stock_weights
stock_weights <- c(0.3, 0.2, 0.5)
stock_weights
stocks * stock_weights
stock_log_ret
dim(stock_log_ret)
dim(stock_weights)
?data.frame
stock_weights <- matrix(c(0.3, 0.2, 0.5), ncol = 1)
stock_weights
stock_weights <- matrix(c(0.3, 0.2, 0.5), ncol = 3)
stock_weights
stocks
head(stocks)
stock_weights <- matrix(c(0.3, 0.2, 0.5), ncol = 1)
stock_weights
stocks %*% stock_weights
head(stocks)
head(stocks[,])
head(stocks[1,])
head(stocks[,2])
A <- matrix(1:9, ncol = 3, byrow = TRUE)
A
A %*% stock_weights
head(stocks)
matrix(stocks, ncol = 3, byrow = FALSE)
head(stocks)
A * stock_weights
stock_weights <- matrix(c(0.3, 0.2, 0.5), ncol = 3)
stock_weights
A * stock_weights
stocks %*% stock_weights
dim(stock_log_ret)
head(stock_log_ret)
stock_weights <- data.frame(c(0.3, 0.2, 0.5), ncol = 3)
stock_weights
stock_weights <- data.frame(c(0.3, 0.2, 0.5))
stock_weights
#### VaR of entire A, B, and C stock portfolio ####
?data.frame
stock_weights <- data.frame(c(0.3, 0.2, 0.5), row.names = c('A', 'B', 'C'))
stock_weights
stock_weights <- colnames('Weights')
stock_weights
stock_weights <- data.frame(c(0.3, 0.2, 0.5), row.names = c('A', 'B', 'C'))
stock_weights <- colnames(stock_weights, 'Weights')
stock_weights
stock_weights <- data.frame(c(0.3, 0.2, 0.5) = weights, row.names = c('A', 'B', 'C'))
stock_weights <- colnames(stock_weights, 'Weights')
stock_weights <- data.frame(weights = c(0.3, 0.2, 0.5), row.names = c('A', 'B', 'C'))
stock_weights <- colnames(stock_weights, 'Weights')
stock_weights
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Value at Risk/Case Study for Stocks.R", echo=TRUE)
stock_weights <- data.frame(weights = c(0.3, 0.2, 0.5), row.names = c('A', 'B', 'C'))
stock_weights
stock_weights <- data.frame(Weights = c(0.3, 0.2, 0.5), row.names = c('A', 'B', 'C'))
stock_weights
head(stocks)
head(stock_log_ret)
stock_log_ret %*% stock_weights
?as.matrix()
as.matrix(stock_weights)
class(as.matrix(stock_weights))
as.matrix(stock_log_ret) %*% as.matrix(stock_weights)
ABC_weighted_returns <- as.matrix(stock_log_ret) %*% as.matrix(stock_weights)
ABC_weighted_returns_sorted <- sort(ABC_weighted_returns)
ABC_weighted_returns
ABC_weighted_returns_sorted
VaR_index <- ceiling(length(ABC_weighted_returns_sorted) * alpha)
ABC_VaR <- ABC_weighted_returns_sorted[VaR_index]
ABC_VaR * port_val
ABC_weighted_returns_L <- -sort(ABC_weighted_returns)
ABC_weighted_returns_L
VaR_index <- ceiling(length(ABC_weighted_returns_L) * alpha)
ABC_VaR <- ABC_weighted_returns_L[VaR_index]
ABC_VaR * port_val
stock_weights <- data.frame(Weights = c(0.3, 0.2, 0.5), row.names = c('A', 'B', 'C'))
stock_weights
head(stock_log_ret)
# ?dim
dim(stock_weights)
dim(stock_log_ret)
head(stock_log_ret)
# L RV of weighted portfolio
ABC_weighted_L <- -as.matrix(stock_log_ret) %*% as.matrix(stock_weights)
ABC_weighted_L <- sort(ABC_weighted_returns)
ABC_weighted_L
VaR_index <- ceiling(length(ABC_weighted_L) * alpha)
ABC_VaR <- ABC_weighted_L[VaR_index]
ABC_VaR * port_val
quantile(ABC_weighted_L, alpha, type = 1)
quantile(ABC_weighted_L, alpha, type = 1) * port_val
ABC_mu <- mean(ABC_weighted_L)
ABC_sigma <- sd(ABC_weighted_L)
ABC_VaR_Norm <- (ABC_mu + dnorm(ABC_weighted_L, ABC_mu, ABC_sigma))
ABC_VaR_Norm <- (ABC_mu + ABC_sigma * qnorm(alpha)) * port_val
# VaR of weighted portfolio if losses are t-distributed
t_mod_ABC <- fit.st(ABC_weighted_L)
t_mod_ABC$par.ests
t_nu, t_mu, t_sigma <- t_mod_ABC$par.ests
c(t_nu, t_mu, t_sigma) <- t_mod_ABC$par.ests
ABC_VaR_t <- (t_mod_ABC$par.ests['mu'] +
t_mod_ABC$par.ests['sigma'] * qt(alpha, t_mod_ABC$par.ests['nu']))
ABC_VaR_t <- (t_mod_ABC$par.ests['mu'] +
t_mod_ABC$par.ests['sigma'] * qt(alpha, t_mod_ABC$par.ests['nu'])) * port_val
ABC_VaR_t
as.int(ABC_VaR_t)
as.numeric(ABC_VaR_t)
# L RV of weighted portfolio
ABC_weighted_L <- -(as.matrix(stock_log_ret) %*% as.matrix(stock_weights))
ABC_weighted_L <- sort(ABC_weighted_returns)
ABC_weighted_L
VaR_index <- ceiling(length(ABC_weighted_L) * alpha)
ABC_VaR <- ABC_weighted_L[VaR_index]
ABC_VaR * port_val
quantile(ABC_weighted_L, alpha, type = 1) * port_val
# L RV of weighted portfolio
ABC_weighted_ret <- as.matrix(stock_log_ret) %*% as.matrix(stock_weights)
head(ABC_weighted_ret)
ABC_weighted_L <- -ABC_weighted_ret
ABC_weighted_L <- sort(ABC_weighted_L)
VaR_index <- ceiling(length(ABC_weighted_L) * alpha)
ABC_VaR <- ABC_weighted_L[VaR_index]
ABC_VaR * port_val
quantile(ABC_weighted_L, alpha, type = 1) * port_val
ABC_mu <- mean(ABC_weighted_L)
ABC_sigma <- sd(ABC_weighted_L)
# VaR of weighted portfolio if losses are normal-distributed
ABC_VaR_Norm <- (ABC_mu + ABC_sigma * qnorm(alpha)) * port_val
# VaR of weighted portfolio if losses are t-distributed
t_mod_ABC <- fit.st(ABC_weighted_L)
ABC_VaR_t <- (t_mod_ABC$par.ests['mu'] +
t_mod_ABC$par.ests['sigma'] * qt(alpha, t_mod_ABC$par.ests['nu'])) * port_val
as.numeric(ABC_VaR_t)
L <- c(4, 1, 2, 5, 7, 8, 4, 8, 6 ,3, 1, 1)
alpha <- 0.7
sort(L)
L_sorted <- sort(L)
L_sorted[ceiling(length(L_sorted) * alpha)]
ecdf_fun <- ecdf(L)
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
par()
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
?reset.par
par(mfrow = c(1,1), mai = c(0.5, 0.5, 0.5, 0.5))
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
lines(c(-2, 10), c(alpha, alpha), col = 'red', lwd = '2')
alines(c(-2, 10), c(alpha, alpha), col = 'red', lwd = '2')
ablines(c(-2, 10), c(alpha, alpha), col = 'red', lwd = '2')
?lines
?lines
lines(c(-2, 10), alpha, col = 'red', lwd = '2')
lines(alpha, col = 'red', lwd = '2')
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
lines(alpha, col = 'red', lwd = '2')
lines(1,alpha, col = 'red', lwd = '2')
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
lines(1, alpha, col = 'red', lwd = '2')
lines(c(-2, 10), c(alpha, alpha + 0.1), col = 'red', lwd = '2')
lines(c(-2, 10), c(alpha, alpha), col = 'red', lwd = '2')
par(mfrow = c(1,1), mai = c(0.5, 0.5, 0.5, 0.5))
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
lines(c(-2, 10), c(alpha, alpha), col = 'red', lwd = '2')
VaR <- quantile(L, alpha, type = 1)
L <- c(4, 1, 2, 5, 7, 8, 4, 8, 6 ,3, 1, 1)
alpha <- 0.7
sort(L)
L_sorted <- sort(L)
L <- c(4, 1, 2, 5, 7, 8, 4, 8, 6 ,3, 1, 1)
alpha <- 0.7
sort(L)
L_sorted <- sort(L)
L_sorted[ceiling(length(L_sorted) * alpha)]
ecdf_fun <- ecdf(L)
par(mfrow = c(1,1), mai = c(0.5, 0.5, 0.5, 0.5))
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
lines(c(-2, 10), c(alpha, alpha), col = 'red', lwd = '2')
VaR <- quantile(L, alpha, type = 1)
L <- c(4, 1, 2, 5, 7, 8, 4, 8, 6 ,3, 1, 1)
L <- c(4, 1, 2, 5, 7, 8, 4, 8, 6 ,3, 1, 1)
?ls
ls
ls
L <- c(4, 1, 2, 5, 7, 8, 4, 8, 6 ,3, 1, 1)
alpha <- 0.7
sort(L)
L_sorted <- sort(L)
L_sorted[ceiling(length(L_sorted) * alpha)]
ecdf_fun <- ecdf(L)
par(mfrow = c(1,1), mai = c(0.5, 0.5, 0.5, 0.5))
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
lines(c(-2, 10), c(alpha, alpha), col = 'red', lwd = '2')
VaR <- quantile(L, alpha, type = 1)
L <- c(4, 1, 2, 5, 7, 8, 4, 8, 6 ,3, 1, 1)
alpha <- 0.7
sort(L)
L_sorted <- sort(L)
L_sorted[ceiling(length(L_sorted) * alpha)]
ecdf_fun <- ecdf(L)
par(mfrow = c(1,1), mai = c(0.5, 0.5, 0.5, 0.5))
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
lines(c(-2, 10), c(alpha, alpha), col = 'red', lwd = '2')
VaR <- quantile(L, alpha, type = 1)
VaR
ProbCond <- sum(L > VaR)
VaR <- as.numeric(quantile(L, alpha, type = 1))
ProbCond <- sum(L > VaR)
ProbCond
class(ProbCond)
ProbCond <- sum(L > VaR)
ProbCond <- sum(L > VaR) / length(L)
gamma <- ProbCond / (1 - alpha)
mean(L[L > VaR])
gamma * mean(L[L > VaR]) + (1-gamma) * VaR
#### Expected Shortfall of Stock A ####
A_ES <- mean(A_stock_L[A_stock_L > A_VaR]) * port_val
N_ES <- (A_mu + A_sigma * integrate(integrand, qnorm(alpha), Inf)$value / (1-alpha)) * port_val
ES <- gamma * mean(L[L > VaR]) + (1-gamma) * VaR
# 73%-VaR
line(c(0,10), c(0.73, 0.73), col = 'blue')
# 73%-VaR
lines(c(0, 10), c(0.73, 0.73), col = 'blue')
# 73%-VaR
lines(c(-2, 10), c(0.73, 0.73), col = 'blue', lwd = '2')
L[ceiling(length(L) * 0.73)]
ecdf_fun
?ecdf
plot(ecdf_fun, L)
plot(ecdf_fun(L), L)
?ablien
?abline
abline(0.73)
abline
?abline
abline(v= 0.73)
L > VaR
L[L > VaR]
mean(L[L > VaR])
ecdf_fun(6)
plot(ecdf_fun,
main = 'Emp DF',
xlab = 'L',
ylab = 'F_L')
