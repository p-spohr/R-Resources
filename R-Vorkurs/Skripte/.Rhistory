# Movie Resenzionen Beispiel ####
movie_ratings <- runif(10, min = 0, max = 5)
movie_ratings <- round(movie_ratings)
print(movie_ratings)
movie_ratings > 5 # returns logical index
movie_ratings < 2
movie_ratings[movie_ratings > 5]
movie_ratings > 5 # returns logical index
movie_ratings < 2
movie_ratings[movie_ratings > 2]
movie_ratings[movie_ratings < 2]
movie_ratings[movie_ratings > 3]
movie_ratings[movie_ratings < 2]
any(movie_ratings < 0) # [1] FALSE
any(movie_ratings > 5) # [1] FALSE
any(movie_ratings > 3) # [1] TRUE
is.null(movie_ratings)
is.na(movie_ratings) # all false because none are NA
test_null <- NULL
is.null(test_null) # [1] TRUE
is.numeric(movie_ratings) # [1] TRUE
is.character(movie_ratings) # [1] FALSE
for (rating in movie_ratings) {
print(rating)
}
movie_quality <- vector('character')
# changing the rating system from a qualitative to a quantitative one
for (rating in movie_ratings) {
if (rating < 2) {
movie_quality <- append(movie_quality, 'disliked') # make sure to assign!
} else if ( rating >=2 && rating < 4) {
movie_quality <- append(movie_quality, 'enjoyed')
} else {
movie_quality <- append(movie_quality, 'liked')
}
}
movie_quality
breadworld.name <- c("Tom", "Carly", "Jane", "Juan", "Bill")
breadworld.salary <- c(55000, 60000, 80000, 60000, 45000)
breadworld.employees <- rbind(breadworld.employees, breadworld.salary)
class(breadworld.employees)
breadworld.name <- c("Tom", "Carly", "Jane", "Juan", "Bill")
breadworld.salary <- c(55000, 60000, 80000, 60000, 45000)
breadworld.employees <- rbind(breadworld.employees, breadworld.salary)
## Creating named vector
names(breadworld.salary) <- breadworld.name
breadworld.salary
breadworld.salary["Bill"]
breadworld.salary[1]
## Naming columns and rows in a matrix
colnames(A) # NULL return
## Combining matrices vectors
A <- matrix(1, nrow = 3, ncol = 3) ; A
cbind(A, c(2,2,2)) # does not happen in place
rbind(A, c(2,2,2))
A.new <- cbind(A, c(2,2,2)) ; A.new
sqrt(5)
# natürlicher Logarithmus
log(2)
2/exp(1)
# Differenz
diff(c(1,2,3), lag = 1)
# Differenz
diff(c(8,10,12), lag = 1)
# Differenz
diff(c(5,13,20), lag = 1)
# Differenz
diff(c(5,3,10), lag = 1)
c(1,2,"3")
class(c(1,2,"3")) # !!!VORSICHTIG!!!
# Standardabweichung
sd(c(1,2,3))
?date
## get current date
date()
print('1. Abschnitt!') # output Hallo!
1
union(1:5, 3:8)
intersect(1:5, 3:8)
setdiff(1:5, 3:8)
setequal(1:5, 3:8)
is.element(1:5, 3:8) # returns logical vector
array(1:3, c(3,3)) # creates matrix
?array
append(1:3, 4) # add 4 to end of list
append(1:3, 4, after = 0) # add 4 to beginning of list
# erzeugen Sie Vektoren
seq(1,5,1)
rep(0, 5)
union(1:5, 10:15)
intersect(-5:0, 0:5)
setdiff(1:5, 3:8)
setequal(1:5, 3:8)
vect <- c(1,2,3)
vect <- c(vect, 4:6)
vect
exp(c(1,2,3))
exp(c(1,2,3))
sin(c(1,2,3))
log(c(1,2,3))
max(c(1,2,3))
min(c(1,2,3))
rm(list = ls())
vect <- c(1, -1, 5, 0, -8, 2, 4, 0, 15, 20, -30, 0, 0, 6)
max(vect)
min(vect)
exp(vect)
log(vect)
diff(vect)
vect <- c(1, -1, 5, 0, -8, 2, 4, 0, 15, 20, -30, 6)
diff(vect)
sum(vect)
vect <- c(1, -1, 5, 0, -8, 2, 4, 0, 15, 20, -30, 6)
max(vect)
min(vect)
sum(vect)
cumsum(vect)
# A6
abs(vect)
# A7
mean(vect)
# A8
sd(vect)
# A9
as.character(vect)
breadworld.name <- c("Tom", "Carly", "Jane", "Juan", "Bill")
breadworld.salary <- c(55000, 60000, 80000, 60000, 45000)
## Creating named vector
names(breadworld.salary) <- breadworld.name
breadworld.salary
breadworld.salary["Bill"]
breadworld.salary[1]
bw_df <- data.frame(name = breadworld.name, salary = breadworld.salary)
bw_df
rownames(bw_df) <- seq(1,nrow(bw_df))
bw_df
bw_df
# A10
append(vect, 1000)
# A10
append(vect, Inf)
# A11
length(vect)
length(c(1,2,3))
length(vect)
# A12
matrix(vect, nrow = 3, ncol = 3)
# A12
matrix(vect, nrow = 3, ncol = 4)
# A12
matrix(vect, nrow = 3, ncol = 4, byrow = TRUE)
# A1
203 + 43 - 12
# A2
5 * 43 + 100
# A3
sqrt(10^3)
# A4
sin(3) / (4.23 - 3.2)
# A5
(exp(3)/factorial(5))^0.5
# A6
log(exp(1))
# A7
1/3 * abs(10 - 100)
# A8
asin(1)
# A8
asin(1)
# A9
10 / pi
# A9
(100 / pi) - 10
# A10
sin(exp(0.5) * exp(-4))
sin(exp(-2))
# A10
sin(exp(0.5) * exp(-1))
sin(exp(-0.5))
# A10
sin(exp(0.5) * exp(-4))
seq(-5, 5, 0.5)
vect2 <- seq(-5, 5, 0.5)
range(vect2)
vect2[1:2]
vect2[-1]
vect2[-1:-5]
vect2[-1:-10]
vect2[-1:1]
vect2[-1:-21]
vect2[-1:-2]
vect2[-1:-5]
vect2[-1:-10]
vect2[-1:-18]
names <- c('Thorsten', 'Helena', 'Kris', 'Franky')
names[c(1,4)]
names[-c(1,4)]
N <- matrix(1, nrow=2, ncol = 2) ; N
N + N
N - N
N / N
N * N # element wise multiplication
N %*% N # matrix multiplication
N * N == N%*%N # ALL FALSE
hungrig <- TRUE
if(hungrig) {
print('Ich habe Hunger!')
}
bargeld <- 10
bargeld <- 20
if (hungrig && bargeld > 15) {
print('Ich gehe essen!')
}
if (hungrig && bargeld > 15) {
print('Ich gehe essen!')
} else if (!hungrig) {
print('Ich habe keinen Hunger!')
}
hungrig <- F
if (hungrig) {
print('Ich habe Hunger!')
}
bargeld <- 20
if (hungrig && bargeld > 15) {
print('Ich gehe essen!')
} else if (!hungrig) {
print('Ich habe keinen Hunger!')
}
if (hungrig && bargeld > 15) {
print('Ich gehe essen!')
} else if (!hungrig) {
print('Ich habe keinen Hunger!')
} else if(bargeld < 15) {
print('Ich habe nicht genug bargeld dabei!')
}
hungrig <- F
if (hungrig) {
print('Ich habe Hunger!')
}
bargeld <- 2
if (hungrig && bargeld > 15) {
print('Ich gehe essen!')
} else if (!hungrig) {
print('Ich habe keinen Hunger!')
} else if(bargeld < 15) {
print('Ich habe nicht genug bargeld dabei!')
}
hungrig <- T
if (hungrig) {
print('Ich habe Hunger!')
}
bargeld <- 2
if (hungrig && bargeld > 15) {
print('Ich gehe essen!')
} else if (!hungrig) {
print('Ich habe keinen Hunger!')
} else if(bargeld < 15) {
print('Ich habe nicht genug bargeld dabei!')
}
bargeld <- 20
if (hungrig && bargeld > 15) {
print('Ich gehe essen!')
} else if (!hungrig) {
print('Ich habe keinen Hunger!')
} else if(bargeld < 15) {
print('Ich habe nicht genug Bargeld dabei!')
}
if (bargeld > 15) {
print('Ich habe nicht genug Bargeld dabei!')
}
bargeld <- 20
if (bargeld > 15) {
print('Ich habe nicht genug Bargeld dabei!')
}
if (bargeld > 15) {
print('Ich habe genug Bargeld dabei!')
}
hungrig <- T
if (hungrig) {
print('Ich habe Hunger!')
}
bargeld <- 20
if (bargeld > 10) {
print('Ich habe genug Bargeld dabei!')
}
if (hungrig && bargeld > 10) {
print('Ich kaufe einen Döner!')
} else if (!hungrig) {
print('Ich habe keinen Hunger!')
} else if (bargeld < 15) {
print('Ich habe nicht genug Bargeld dabei!')
}
'Helena' %in% names
'Kristina' %in% names
# Matrix ####
A <- matrix(5, nrow = 3, ncol = 3) ; A
B <- matrix(c(1,2,3), nrow = 3, ncol = 3) ; B
C <- matrix(c(1,2,3), nrow = 3, ncol = 3, byrow = TRUE) ; C
d <- c(1,2,3,4,5,6,7,8,9)
D <- matrix(d, nrow = 3, ncol = 3, byrow = TRUE) ; D
D
ds <- c(3, 2, 5)
solve(D,ds)
solve(ds, D)
solve(D, ds)
ds <- c(1, 2, 5)
solve(D, ds)
eigen(D)
ds <- c(1, 2, 0)
solve(D, ds)
D <- D - matrix(runif(9, min = 1, max = 4), ncol = 3)
ds <- c(1, 2, 0)
solve(D, ds)
# werfen Sie einen Würfel
runif(5, min = 1, max = 6)
# werfen Sie einen Würfel
roun(runif(5, min = 1, max = 6))
# werfen Sie einen Würfel
round(runif(5, min = 1, max = 6))
# werfen Sie einen Würfel
round(floor(runif(5, min = 1, max = 6)))
# Ceiling
ceil(5.1)
# Ceiling
round(5.1)
# Ceiling
ceiling(5.1)
# Untergrenze
floor(2.9)
# Abrunden
round(4.2131234, 3)
# Abrunden
round(4.2131234, digits = 3)
# werfen Sie einen Würfel
round(floor(runif(5, min = 1, max = 6)))
# werfen Sie einen Würfel
runif(1)
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
sample(seq(1,6), 5, replace = TRUE, prob = rep(1/6, 6))
A
A <- cbind(A, c(1,2,3))
# Matrix ####
A <- matrix(5, nrow = 3, ncol = 3) ; A
cbind(A, c(1,2,3))
rbind(A, c(1,2,3))
# Matrix ####
A <- matrix(5, nrow = 3, ncol = 3) ; A
B <- matrix(c(1,2,3), nrow = 3, ncol = 3) ; B
C <- matrix(c(1,2,3), nrow = 3, ncol = 3, byrow = TRUE) ; C
d <- seq(1,9)
D <- matrix(d, nrow = 3, ncol = 3, byrow = TRUE) ; D
M <- matrix(1:9)
dim(M) # [1] 9 1
M.T <- t(M) # transpose matrix
dim(M.T) # [1] 1 9
D <- D - matrix(runif(9, min = 1, max = 4), ncol = 3)
ds <- c(1, 2, 0)
solve(D, ds)
names2 <- append(names, c('Abdul', 'Marry', 'Zoya'))
names2
print(name)
for (name in names2) {
print(name)
}
for (name in names2) {
paste0(name, ' sagt Hallo!')
}
for (name in names2) {
begruessung = paste0(name, ' sagt Hallo!')
print(begrussung)
}
for (name in names2) {
begruessung = paste0(name, ' sagt Hallo!')
print(begrussung)
}
for (name in names2) {
begruessung = paste0(name, ' sagt Hallo!')
print(begruessung)
}
# Ausdrucken und Formatierung
print('Hi!')
name <- 'Patrick'
rm(list = ls())
# Ausdrucken und Formatierung
print('Hi!')
name <- 'Patrick'
paste('Ich bin', name)
paste(name, 'hat', 2, 'Schwestern.')
paste0('H', 'T', 'W')
paste('Ich bin', name, sep = '')
paste('Ich bin', name, sep = ' ')
paste(vect)
vect <- c(1,2,3)
vect <- c(vect, 4:6)
vect
length(vect)
paste(vect)
paste0(vect)
breadworld.name <- c("Tom", "Carly", "Jane", "Juan", "Bill")
breadworld.salary <- c(55000, 60000, 80000, 60000, 45000)
## Creating named vector
names(breadworld.salary) <- breadworld.name
breadworld.salary
breadworld.salary["Bill"]
breadworld.salary[1]
breadworld.salary[-1]
breadworld.salary[5]
## Slicing (Indizieren)
breadworld.names[1] # first entry is one !!!different from other languages
breadworld.names <- c("Tom", "Carly", "Jane", "Juan", "Bill")
breadworld.salaries <- c(55000, 60000, 80000, 60000, 45000)
## Slicing (Indizieren)
breadworld.names[1] # first entry is one !!!different from other languages
breadworld.names[1:1] # same as above
breadworld.names[1:3] # select first three names
breadworld.names[5] # select last name
breadworld.names[6] # NA !!!does not throw an error
breadworld.names[-2] # selects all but second position
breadworld.names[-1:-3] # selects all but first three
breadworld.names[1:3]
## Creating named vector
names(breadworld.salary) <- breadworld.name
breadworld.salary
## Creating named vector
names(breadworld.salaries) <- breadworld.names
breadworld.salaries
breadworld.salary["Bill"]
breadworld.salary[5]
bw_df <- data.frame(name = breadworld.name, salary = breadworld.salary)
bw_df
# rownames(bw_df) <- seq(1,nrow(bw_df))
uname(bw_df)
paste0(unlist(vect))
rownames(bw_df) <- seq(1,nrow(bw_df))
bw_df
paste0(vect, collapse = '')
paste(vect, collapse = '')
paste(vect, collapse = '')
paste0('H', 'T', 'W', collapse = '')
abc <- c('a', 'b', 'c')
paste(abc)
paste(abc, collapse = '')
toupper(name)
tolower(name)
name[-1]
name
strsplit(name)
strsplit(name, split = '')
lastname <- strsplit(name, split = '')
lastname[-c(1, floor(length(lastname)/2), length(lastname))]
lastname[1]
strsplit(name, split = '')
vector(strsplit(name, split = ''))
unlist(strsplit(name, split = ''))
?unlist
lastname <- unlist(strsplit(name, split = ''))
lastname[-c(1, length(lastname))]
## Analyzing some observations
mean(breadworld.salaries)
breadworld.salaries > mean(breadworld.salaries)
greater.mean <- breadworld.salaries > mean(breadworld.salaries) ; greater.mean
breadworld.salaries[greater.mean]
# do it all in one line
breadworld.salaries[breadworld.salaries > mean(breadworld.salaries)]
nrow(bw_df)
ncol(bw_df)
bw_df$age = floor(runif(5, min = 20, max = 70))
bw_df
vect <- c(1, -1, 5, 0, -8, 2, 4, 0, 15, 20, -30, 6)
# A1
max(vect)
# A2
min(vect)
# A3
sum(vect)
# A4
cumsum(vect)
# A5
diff(vect)
# A6
abs(vect)
# A7
mean(vect)
# A8
sd(vect)
# A9
as.character(vect)
# A10
append(vect, Inf)
# A11
length(vect)
# A12
matrix(vect, nrow = 3, ncol = 4, byrow = TRUE)
