## CTRL + ENTER => run line
12345 # output 12345
3L == 3.1 # [1] TRUE
print(T, F)
print(T)
print(F)  # Abkürzung
if (5%%2 != 0) print("odd")
if (6%%2 == 0) print("even")
if (5%%2 != 0) print("odd") else print('even')
if (5%%2 != 0) print("odd") else print('even')
if (6%%2 == 0) print("even") else print('odd')
if (6%%2 != 0) print("odd") else print('even')
if (3%%2 != 0) print("odd") else print('even')
if (7%%2 == 0) print("even") else print('odd')
if (8%%2 == 0) print("even") else print('odd')
## CTRL + ENTER => führt Zeile aus und Cursor geht zum nächsten Teil
12345 # output 12345
## ALT + ENTER => führt Zeile aus und Cursor bleibt
print('Hallo!') # output Hallo!
# https://www.w3schools.com/r/r_data_types.asp
# numeric - (10.5, 55, 787)
22.22 # float
# integer - (1L, 55L, 100L, "L" steht für integer)
3L == 3.0 # [1] TRUE
3L == 3.1 # [1] FALSE
class(3L) # [1] "integer"
class(3) # [1] "numeric"
# complex - (9 + 3i)
?complex # lesen Sie für mehr Information (für unser Program nicht wichtig)
com <- 2 + 3i
class(com) # [1] "complex"
# character (a.k.a. string) - ("k", "R is exciting", "FALSE", "11.5")
"HI" # [1] "HI"
'HEY' # [1] "HEY"
# logical (a.k.a. boolean) - (TRUE or FALSE)
TRUE # [1] TRUE
T # [1] TRUE
FALSE # [1] FALSE
F # [1] FALSE
"TRUE" == TRUE # [1] TRUE !!!vorsichtig!!!
"FALSE" == FALSE # [1] TRUE !!!vorsichtig!!!
class("FALSE") # [1] "character"
class(FALSE) # [1] "logical"
print(T)  # Abkürzung
print(F)  # Abkürzung
"F" == F [1] FALSE
# https://www.w3schools.com/r/r_data_types.asp
# numeric - (10.5, 55, 787)
22.22 # float
# integer - (1L, 55L, 100L, "L" steht für integer)
3L == 3.0 # [1] TRUE
3L == 3.1 # [1] FALSE
class(3L) # [1] "integer"
class(3) # [1] "numeric"
# complex - (9 + 3i)
?complex # lesen Sie für mehr Information (für unser Program nicht wichtig)
com <- 2 + 3i
class(com) # [1] "complex"
# character (a.k.a. string) - ("k", "R is exciting", "FALSE", "11.5")
"HI" # [1] "HI"
'HEY' # [1] "HEY"
# logical (a.k.a. boolean) - (TRUE or FALSE)
TRUE # [1] TRUE
T # [1] TRUE
FALSE # [1] FALSE
F # [1] FALSE
"TRUE" == TRUE # [1] TRUE !!!vorsichtig!!!
"FALSE" == FALSE # [1] TRUE !!!vorsichtig!!!
class("FALSE") # [1] "character"
class(FALSE) # [1] "logical"
print(T)  # Abkürzung
print(F)  # Abkürzung
"F" == F # [1] FALSE
t <- 10
class(t) # [1] "numeric"
name <- "Fred"
class(name) # [1] "character"
class(factorial) # [1] "function"
name
name[1]
name[2]
name[1]
name[[1]]
name[[1]]
strsplit(name)
strsplit(name, split = '')
email <- 'm.mueller@htwberlin.org'
strsplit(email, split = '@')
strsplit(email, split = '[@]')
strsplit(email, split = '.')
strsplit(email, split = '[.]')
strsplit(email, split = '@')
class(sum)
help(sum)
help.search(sum)
help.search('sum')
??vector
help('vector')
ls()
rm(list = ls())
help.search('linear regression')
help.search('linear regression', package = 'base')
help.search('linear regression')
?lm
help.search('linear regression', package = 'stats')
help.search('regression', package = 'stats')
help.search('optimization', package = 'stats')
packageDescription('stats')
library(help = 'stats')
library(help = 'utils')
help.search('write csv')
help.search('write to comma deliminated ')
help.search('write to comma deliminated')
help.search('csv')
?write.csv
help.search('csv')
help.search('write csv')
?sample
pnorm(c(0.25, 0.50, 0.75, 1))
?pnorm
dnorm(c(0.25, 0.50, 0.75, 1))
qnorm(c(0.25, 0.50, 0.75, 1))
qnorm(c(0.25, 0.50, 0.75, 1))
pnorm(c(0.25, 0.50, 0.75, 1))
pnorm(0.5)
pnorm(0.95)
pnorm(0)
qnorm(c(0.25, 0.50, 0.75, 1))
dnorm(c(0.25, 0.50, 0.75, 1))
dnorm(c(-1, 0, 1))
pnorm(c(-1, 0, 1))
qnorm(0.68)
pnorm(1)
pnorm(2)
qnorm(0.68)
1 - 2*pnorm(1)
1 - pnorm(1)
1 - pnorm(1)
1 - pnorm(-1)
1 - 2* pnorm(-1)
library(help = 'base')
library(help = 'graphics')
?library
install.packages()
search()
?search
library()
options()
log()
## CTRL + ALT + K => wählt nächstes Wort and kopiert Cursor
## !!!Sie Müssen es in Tools->Modify Keyboard Shortcuts ändern.
## Name: Find and Add Next
# Jump from SUPER to the next SUPER!
# Jump from SUPER to the next SUPER!
# Jump from SUPER to the next SUPER!
name <- 'pat'
log(x = )
log(x = name)
getwd()
install.packages('cowsay')
library(cowsay)
library(help = 'cowsay')
?say
say(what = "Let's Learn R!", by = 'cat')
say(what = "Let's Learn R!", by = 'dog')
say(what = "Let's Learn R!")
say(what = "Let's Learn R!", by = 'dog')
say(what = "Let's Learn R!", by = 'shark')
say(what = "R is not as scary as me!", by = 'shark')
x <- 0 # überschreiben Sie x mit 0
y / x # = Inf (!!!code will still run but will cause problems later)
## assignment operators
# benutzen Sie <- um Variablen zu initialisieren
x <- 2 # üblich
y = 3 # nicht üblich aber erlaubt
# mit ';' kann man mehrere Befehle in einer Zeile ausführen
x ; y
x + y
x <- 0 # überschreiben Sie x mit 0
y / x # = Inf (!!!code will still run but will cause problems later)
rm(list = ls())
# Vergleichsoperatoren
# !!!vorsichtig!!! großer Unterschied zwischen '=' und '=='
5 == 5 # [1] TRUE
5 != 5 # [1] FALSE
1 < 5 # [1] TRUE
5 > 10 # [1] FALSE
5 >= 5 # [1] TRUE
5 <= 4 # [1] FALSE
## Kombinationoperatoren
# und mit '&&'
1 < 3 && 2 == 2 # [1] TRUE
1 < 3 && 2 != 2 # [1] FALSE
7 < 3 && 3 != 2 # [1] FALSE # two false comparisons
1 == 1 && 2 == 2 && 3 ==3 # [1] TRUE # can use more than two
# oder mit '|'
1 < 3 | 2 == 2 # [1] TRUE
1 < 3 | 2 != 2 # [1] TRUE
7 < 3 | 3 != 2 # [1] TRUE # two false comparisons
1 == 1 | 2 == 2 | 3 == 3 # [1] TRUE # all true
1 == 1 | 2 == 2 | 3 != 3 # [1] TRUE # all true but one
1 != 1 | 2 != 2 | 3 != 3 # [1] FALSE # none are true
1 == 1 | 2 == 2 | 3 != 3 # [1] TRUE # alle falsch
## using logical operators to change values
?rnorm
movie_ratings <- rnorm(n = 20, mean = 2.5, sd= 2.5)
movie_ratings <- round(movie_ratings, digits = 2)
movie_ratings <- rnorm(n = 20, mean = 2.5, sd= 1.5)
movie_ratings <- round(movie_ratings, digits = 2)
print(movie_ratings)
movie_ratings <- rnorm(n = 20, mean = 2.5, sd= 1.5)
movie_ratings <- round(movie_ratings)
print(movie_ratings)
movie_ratings <- rnorm(n = 20, mean = 2.5, sd= 1.5)
movie_ratings <- max(movie_ratings, 0)
movie_ratings <- round(movie_ratings)
print(movie_ratings)
## using logical operators to change values
movie_ratings <- runif(10, min = 0, max = 5)
movie_ratings <- round(movie_ratings)
print(movie_ratings)
movie_ratings <- round(movie_ratings)
print(movie_ratings)
movie_ratings > 5 # returns logical index
movie_ratings < 0
movie_ratings < 2
print('1. Abscnitt!') # output Hallo!
print('2. Abscnitt!') # output Hallo!
print('3. Abschnitt!') # output Hallo!
## CTRL + L => leert console
## CTRL + SHIFT P => öffnet Command Palette
## ALT + SHIFT K => öffnet Hotkey Cheet Sheet
## CTRL + SHIFT + N => erstellt neues R-script
## CTRL + S => speichert Datei
## CTRL + ALT + S => speichert alle
## Hotkey Documentation
# https://docs.posit.co/ide/user/ide/reference/shortcuts.html
# SHIFT + Right Mouse => öffnet Links
## wählen Sie die Zeilen + CTRL + SHIFT + C =>  Kommentare Umschaltung
# a
# b
# c
# (keine  Blockkommentare verfügbar)
## CTRL + F => findet und ersetzt ein Wort
# CTRL + ALT + rechte Maustaste => mehrfache Cursor
# Hi, my name is Patrick. I wrote this all in one go!
# Hi, my name is Patrick. I wrote this all in one go!
# Hi, my name is Patrick. I wrote this all in one go!
# CTRL + ALT + auf/ab => mehrfache Cursor
# Just like above, I can write a lot quickly.
# Just like above, I can write a lot quickly.
# Just like above, I can write a lot quickly.
# ALT + SHIFT + auf/ab => dupliziert Zeile auf/ab
# 123456789
## CTRL + SHIFT + H => wählen Sie Arbeitsverzeichnis
# (Prüfen Sie mit Files Scheibe)
## wählen Sie die Zeilen + ALT + auf/ab Arrow
# verschiebt Zeilen ohne andere zu beeinflussen
# "Coding like poetry should be short and concise." - Santosh Kalwar
## ALT + rechts/links Pfeil
# verschiebt Cursor vorne und hinten (Zeile)
## CTRL + rechts/links Pfeil
# verschiebt Cursor vorne und hinten (Wort)
## CTRL + D => löscht Zeile
# CTRL + Z (macht es rückgängig)
## CTRL + SHIFT + D => dupliziert Zeile
# complex32 number23 and34 words23 DUPLICATE!
# complex32 number23 and34 words23 DUPLICATE!
# complex32 number23 and34 words23 DUPLICATE!
## CTRL + SHIFT + auf => wählt Abschnitt
# 10101010101010101010
# 10101010101010101010
## ALT + K => wählt nächstes Wort
# Jump from WOW to the next WOW!
# Jump from WOW to the next WOW!
# Jump from WOW to the next WOW!
## CTRL + ALT + K => wählt nächstes Wort and kopiert Cursor
## !!!Sie Müssen es in Tools->Modify Keyboard Shortcuts ändern.
## Name: Find and Add Next
# Jump from SUPER to the next SUPER!
# Jump from SUPER to the next SUPER!
# Jump from SUPER to the next SUPER!
# CTRL + J => trennt Zeile am Cursor
# abcdefghijklmnopqrstuvwxyz
# CTRL + K => yankt alles nach Cursor
# This is pracitce. Get everything after the first sentence.
# This is pracitce. Get everything after the first sentence.
# CTRL + U => yankt alles vor Cursor
# This is pracitce. Get everything before the first sentence.
# This is pracitce. Get everything before the first sentence.
# CTRL + Y => fügen geyankte Zeile ein
# This is pracitce. Get everything after the first sentence.
# This is pracitce. Get everything after the first sentence.
print('3. Abschnitt!') # output Hallo!
sin(1)
sin(0)
cos(1)
cos(0)
tan(10)
print('1. Abschnitt!') # output Hallo!
sin(0)
print('2. Abschnitt!') # output Hallo!
cos(0)
set.seed(123)
vect = runif(8, min = -5, max = 5)
rm(list = ls())
set.seed(123)
vect <- runif(8, min = -5, max = 5)
vect <- round(vect)
print(zahl)
for (zahl in vect) {
print(zahl)
}
kleinste = Inf
for (zahl in vect) {
if (zahl < kleinste) {
kleinste = zahl
}
}
kleinste
source("C:/Users/pat_h/OneDrive/p-spohr-repos/R-Resources/R-Vorkurs/min-max-aufgabe.R")
groesste = -Inf
for (zahl in vect) {
if (zahl > kleinste) {
kleinste = zahl
}
}
groesste
for (zahl in vect) {
if (zahl > groesste) {
groesste = zahl
}
}
groesste
mein_min <- function(vect) {
kleinste = Inf
for (zahl in vect) {
if (zahl < kleinste) {
kleinste = zahl
}
}
kleinste
}
mein_max <- function(vect) {
groesste = -Inf
for (zahl in vect) {
if (zahl > groesste) {
groesste = zahl
}
}
groesste
}
mein_min(vect) == min(vect)
mein_max(vect) == max(vect)
set.seed(123)
vect <- runif(100, min = -5, max = 5)
vect <- round(vect)
mein_min(vect) == min(vect)
mein_max(vect) == max(vect)
rm(list = ls())
set.seed(123)
vect <- runif(100, min = -5, max = 5)
vect <- round(vect)
mein_min <- function(vect) {
kleinste = Inf
for (zahl in vect) {
if (zahl < kleinste) {
kleinste = zahl
}
}
return(kleinste)
}
mein_min <- function(vect) {
kleinste = Inf
for (zahl in vect) {
if (zahl < kleinste) {
kleinste = zahl
}
}
return(kleinste)
}
mein_max <- function(vect) {
groesste = -Inf
for (zahl in vect) {
if (zahl > groesste) {
groesste = zahl
}
}
return(groesste)
}
mein_min(vect) == min(vect)
mein_max(vect) == max(vect)
rm(list = ls())
set.seed(123)
vect <- runif(100, min = -1000, max = 1000)
vect <- round(vect)
mein_min <- function(vect) {
kleinste = Inf
for (zahl in vect) {
if (zahl < kleinste) {
kleinste = zahl
}
}
return(kleinste)
}
mein_max <- function(vect) {
groesste = -Inf
for (zahl in vect) {
if (zahl > groesste) {
groesste = zahl
}
}
return(groesste)
}
mein_min(vect) == min(vect)
mein_max(vect) == max(vect)
min(vect)
max(vect)
rm(list = ls())
set.seed(123)
vect <- runif(100, min = -10000, max = 10000)
vect <- round(vect)
mein_min <- function(vect) {
kleinste = Inf
for (zahl in vect) {
if (zahl < kleinste) {
kleinste = zahl
}
}
return(kleinste)
}
mein_max <- function(vect) {
groesste = -Inf
for (zahl in vect) {
if (zahl > groesste) {
groesste = zahl
}
}
return(groesste)
}
min(vect)
mein_min(vect) == min(vect)
max(vect)
mein_max(vect) == max(vect)
min(vect)
max(vect)
mein_max(vect)
vect <- c(vect, -Inf, Inf)
mein_min <- function(vect) {
kleinste = Inf
for (zahl in vect) {
if (zahl < kleinste) {
kleinste = zahl
}
}
return(kleinste)
}
mein_max <- function(vect) {
groesste = -Inf
for (zahl in vect) {
if (zahl > groesste) {
groesste = zahl
}
}
return(groesste)
}
mein_min(vect) == min(vect)
mein_max(vect) == max(vect)
min(vect)
factorial(5)
exp(3)/factorial(5)
(exp(3)/factorial(5))^0.5
sqrt(exp(3)/factorial(5))
log(exp(1))
sin(1)
cos(1)
tan(2)
asin(1)
log(2)
log(2, base = 10)
exp(3)
abs(-10)
rm(list = ls())
pi
PI
Nan
NaN
NA
Inf
-Inf
pi
NA
NaN
NULL
