10+10
# CTRL + ENTER => run line
10+10
# subtraction
8-4
# multiplication
2*2
# division
100/20
# exponential
9^2 # 81
9**2
# modulo (return remainder of division)
5 %% 5 # =0
20 %% 5 # =0
20 %% 18 # =2
if (5%%2 > 0) {print("odd")}
if (6%%2 = 0) {print("even")}
if (6%%2 == 0) {print("even")}
# CTRL + ENTER => run line
12345
#### Other General Funtions ####
getwd() #
?help
?setwd
help # go to help using '?' before function
?setwd # go to setwd documentation
help # go to help using '?' before function
?help # go to help using '?' before function
?*
?print
x <- 2
y = 2
print(x, y)
x <- 2 # common
y = 3 # not standard for R
print(x, y)
print(x + y)
x + y
x / 0
?setwd # go to setwd documentation
if (5%%2 > 0) print("odd")
if (6%%2 == 0) print("even")
?print # got to print documentation
t <- 10
class(t)
x <- 0 # overwrite value in current x variable
y / x # = Inf (!!!code will still run but will cause problems later)
name <- "Fred"
class(name)
setwd(".../public-repos/Python-Resources") # sets new working directory
setwd("...\public-repos\Python-Resources") # sets new working directory
setwd("...\\public-repos\\Python-Resources") # sets new working directory
# getting and setting working directory
# important for saving files
getwd() # outputs current working directory
setwd("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Basics") # sets new working directory
# !!! important for debugging and when working with other packages
class(log)
# !!! important for debugging and when working with other packages
class(factorial)
?options
options()
##
rm(list = ls())
rm(a, b)
## using third party packages
# !!!from image processing to machine learning everything is available
# !!!don't reinvent the wheel
install.packages("fortunes")
library(fortunes)
fortune()
fortune() # p
## using third party packages
# !!!from image processing to machine learning everything is available
# !!!don't reinvent the wheel
install.packages("cowsay")
library(cowsay)
?say
?say
say(what = "Hello world!", by = "mushroom")
say(what = "Hello world!", by = "shark")
say(what = "Hello world!", by = "goldfish")
?install
?install.packages
?library
detach("package:cowsay", unload = TRUE)
library(cowsay) #
## PEMDAS (parenthesis, exponents, multiplication, division, add, subtract)
(1 + 1) + 2^2 - 10 / 5 * 2 # =
## PEMDAS (parenthesis, exponents, multiplication, division, add, subtract)
(1 + 1) + 2^2 - 10 / (5 * 2) # =
## PEMDAS (parenthesis, exponents, multiplication, division, add, subtract)
(1 + 1) + 2^2 - 10 / 5 * 2 # =
# 2 + 4 - 2 * 2
(1 + 1) + 2^2 - 10 / (5 * 2) # = 5
?sinpi
?Trig
## R functions (base)
?Trig
?log
?base
library(help = "base")
# examples
mean(c(1,2,3))
cumsum(c(1,2,3)) # =
factorial(4)
?conj
?Conj
?complex
# list of trigonometric functions
?trig
# list of trigonometric functions
?Trig
?complex
?matrix
true
True
TRUE
T
# logical (a.k.a. boolean) - (TRUE or FALSE)
TRUE #
T # [1] TRUE
FALSE # [1] FALSE
F # [1] FALSE
# character (a.k.a. string) - ("k", "R is exciting", "FALSE", "11.5")
"HI"
'HEY'
"FALSE" == FALSE
"F" == FALSE
"F" == F
# https://www.w3schools.com/r/r_data_types.asp
# numeric - (10.5, 55, 787)
22.2 #
# integer - (1L, 55L, 100L, where the letter "L" declares this as an integer)
3L
# integer - (1L, 55L, 100L, where the letter "L" declares this as an integer)
3L == 3
# integer - (1L, 55L, 100L, where the letter "L" declares this as an integer)
3L == 3.0000000000000000000001
# integer - (1L, 55L, 100L, where the letter "L" declares this as an integer)
3L == 3.0000000000001
# integer - (1L, 55L, 100L, where the letter "L" declares this as an integer)
3L == 3.0
# complex - (9 + 3i, where "i" is the imaginary part)
?complex
# complex - (9 + 3i, where "i" is the imaginary part)
i^2
1i
2 + 3i
com <- 2 + 3i
class(com)
sum(c(1,2,3))
class(3L)
class(3) # [1] "integer"
3L / 2
3L / 2L
3.3L
# use '_' or '.' to combine words
customer_name <- "Tim"
customer.name <- "Tim"
# naming conventions
# be descriptive
n <- "Tim" # this is to vague (!!!nightmare to find later in longer code)
name <- "Tim" # better but needs to be descriptive
# numbers only work after first position
5_year_returns <- 0.2
# numbers only work after first position
# 5_year_returns <- 0.2 ERROR
year_returns_5 <- 0.2
.da
"TRUE" == TRUE
class("FALSE")
class(FALSE) # [1] "character"
say(what = "Let's learn R!", by = "goldfish")
?say
say(what = "Let's learn R!", by = "hypnotoad")
# vectors
c(1,2,3)
#
c(1,2,"3")
class(c(1,2,3))
class(c(1,2,"3"))
# matrix
A <- matrix(c(1,2,3), nrow = 2, ncol = 3)
A
# matrix
A <- matrix(c(1,2,3), nrow = 3, ncol = 3)
A
# matrix
A <- matrix(c(1,2,3), nrow = 3, ncol = 3) ; A
x + y # = 5
## assignment operators
# use <- to assign objects to variable
x <- 2 # common
y = 3 # not standard for R
x + y # = 5
# use ';' to split code in one line
x;y
x + y # = 5
B <- matrix(5, nrow = 3, ncol = 3) ; B
# matrix
A <- matrix(5, nrow = 3, ncol = 3) ; A
B <- matrix(c(1,2,3), nrow = 3, ncol = 3) ; B
?matrix
# matrix
A <- matrix(5, nrow = 3, ncol = 3) ; A
B <- matrix(c(1,2,3), nrow = 3, ncol = 3) ; B
C <- matrix(c(1,2,3), nrow = 3, ncol = 3, byrow = TRUE) ; C
D <- matrix(d, nrow = 3, ncol = 3) ; D
d <- c(1,2,3,4,5,6,7,8,9)
D <- matrix(d, nrow = 3, ncol = 3) ; D
D <- matrix(d, nrow = 3, ncol = 3, byrow = TRUE) ; D
1:3
c(1,2,3) == 1:3
c(1,5,3) == 1:3
1:3 = (1:3)
1:3 == (1:3)
# matrix operations
N <- matrix(1, nrow=2, ncol = 2) : N
# matrix operations
N <- matrix(1, nrow=2, ncol = 2) ; N
N + N
N - N
N / N
N ** N
N * N
N %*% N
N * N == N %*%N
# vector operations
c(1,2,3) * 2
# vector operations
c(1,2,3) + 2
c(1,2,3) - 2
c(1,2,3) / 2
c(1,2,3) * 2
c(1,1,1) + c(1,1,1)
c(1,1,1) + c(1,1)
c(1,1,1) + c(1,1,1)
c(1,1,1) - c(1,1,1)
c(1,1,1) / c(1,1,1)
c(1,1,1) * c(1,1,1)
N + 2
N - 2
N / 2
N * 2
# matrix operations
?matrix
?eigen
matrix(1:9)
t(matrix(1:9))
t(1:9)
1:9
matrix(1:9)
M <- matrix(1:9)
dim(M)
t(M)
M_T <- t(M)
M.T <- t(M)
dim(M.T)
library(help = "base")
library(help = "matrix")
?matrix
?union
union(1:5, 3:6)
union(1:5, 3:8)
intersect(1:5, 3:8)
setdiff(1:5, 3:8)
setequal(1:5, 3:8)
is.element(1:5, 3:8)
?array
array(1:3, c(3,3))
?append
append(1:3, 4)
append(1:3, 4, after=0)
append(1:3, 4, after = 1)
append(1:3, 4, after = 0)
date()
sin(1)
sin(0)
cos(1)
cos(2PI)
cos(2 * PI)
cos(2 * pi)
pi
cos(2 * pi)
?split
split(1:5)
split(1:5, sep = ".")
split(1:5, f = ~g, sep = ".")
?factor
split("SUPER", f = factor, sep = ".")
split("SUPER", sep = ".")
?split
source("C:/Users/pat_h/OneDrive/public-repos/R-Resources/Basics/Basics.R")
## CTRL + ENTER => run line
12345 # output 12345
A <- matrix(1, nrow = 3, ncol = 3) ; A
cbind(M, c(2,2,2))
A <- matrix(1, nrow = 3, ncol = 3) ; A
cbind(A, c(2,2,2))
rbind(A, c(2,2,2))
A.new <- cbind(A, c(2,2,2)) ; A.new
## Naming columns and rows
colnames(A)
colnames(A) <- c("First", "Second", "Third") ; A
rownames(A) <- c("First", "Second", "Third") ; A
A["First"]
A["First":"First"]
A[1:1]
A$"First"
## Accessing info in matrix or vector using [:] slice
breadworld.employees <- c("Tom", "Carly", "Jane", "Juan", "Bill")
breadworld.employees[1]
breadworld.employees[1:3]
breadworld.employees[5]
breadworld.employees[6]
breadworld.employees[-1]
breadworld.employees[-2]
breadworld.employees[-1:-3]
breadworld.employees[:]
breadworld.employees[1:]
breadworld.employees[3:]
breadworld.employees[3:3]
breadworld.salary <- c(55000, 60000, 80000, 60000, 45000)
rbind(breadworld.employees, breadworld.salary)
breadworld.review <- rbind(breadworld.employees, breadworld.salary)
breadworld.employees <- rbind(breadworld.employees, breadworld.salary)
rownames(breadworld.employees) <- c("Name", "Salary")
rownames(breadworld.employees) <- c("Name", "Salary") ; breadworld.employees
breadworld.employees[Salary]
breadworld.employees["Salary"]
breadworld.employees[1]
breadworld.employees[6]
breadworld.employees[1:2]
breadworld.employees[1:3]
class(breadworld.employees)
max(breadworld.employees)
colnames(breadworld.salary) <- breadworld.name
breadworld.name <- c("Tom", "Carly", "Jane", "Juan", "Bill")
breadworld.salary <- c(55000, 60000, 80000, 60000, 45000)
breadworld.employees <- rbind(breadworld.employees, breadworld.salary)
class(breadworld.employees)
colnames(breadworld.salary) <- breadworld.name
names(breadworld.salary) <- breadworld.name
breadworld.salary
breadworld.salary["Bill"]
breadworld.salary[1]
## Analyzing some observations
mean(breadworld.salary)
breadworld.salary > mean(breadworld.salary)
breadworld.salary[breadworld.salary > mean(breadworld.salary)]
greater.mean <- breadworld.salary > mean(breadworld.salary) ; greater.mean
breadworld.salary[greater.mean]
